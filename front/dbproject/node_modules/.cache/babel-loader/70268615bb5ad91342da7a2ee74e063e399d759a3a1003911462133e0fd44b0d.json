{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed } from 'vue';\n// recursion (flat tree structure)\nfunction flatRecord(record, indent, childrenColumnName, expandedKeys, getRowKey, index) {\n  const arr = [];\n  arr.push({\n    record,\n    indent,\n    index\n  });\n  const key = getRowKey(record);\n  const expanded = expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.has(key);\n  if (record && Array.isArray(record[childrenColumnName]) && expanded) {\n    // expanded state, flat record\n    for (let i = 0; i < record[childrenColumnName].length; i += 1) {\n      const tempArr = flatRecord(record[childrenColumnName][i], indent + 1, childrenColumnName, expandedKeys, getRowKey, i);\n      arr.push(...tempArr);\n    }\n  }\n  return arr;\n}\n/**\r\n * flat tree data on expanded state\r\n *\r\n * @export\r\n * @template T\r\n * @param {*} data : table data\r\n * @param {string} childrenColumnName : 指定树形结构的列名\r\n * @param {Set<Key>} expandedKeys : 展开的行对应的keys\r\n * @param {GetRowKey<T>} getRowKey  : 获取当前rowKey的方法\r\n * @returns flattened data\r\n */\nexport default function useFlattenRecords(dataRef, childrenColumnNameRef, expandedKeysRef, getRowKey) {\n  const arr = computed(() => {\n    const childrenColumnName = childrenColumnNameRef.value;\n    const expandedKeys = expandedKeysRef.value;\n    const data = dataRef.value;\n    if (expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.size) {\n      const temp = [];\n      // collect flattened record\n      for (let i = 0; i < (data === null || data === void 0 ? void 0 : data.length); i += 1) {\n        const record = data[i];\n        temp.push(...flatRecord(record, 0, childrenColumnName, expandedKeys, getRowKey.value, i));\n      }\n      return temp;\n    }\n    return data === null || data === void 0 ? void 0 : data.map((item, index) => {\n      return {\n        record: item,\n        indent: 0,\n        index\n      };\n    });\n  });\n  return arr;\n}","map":{"version":3,"names":["computed","flatRecord","record","indent","childrenColumnName","expandedKeys","getRowKey","index","arr","push","key","expanded","has","Array","isArray","i","length","tempArr","useFlattenRecords","dataRef","childrenColumnNameRef","expandedKeysRef","value","data","size","temp","map","item"],"sources":["C:/GitHubWarehouse/2023-TJU-DBD-Police-Affair-System/My-front/dbproject/node_modules/ant-design-vue/es/vc-table/hooks/useFlattenRecords.js"],"sourcesContent":["import { computed } from 'vue';\r\n// recursion (flat tree structure)\r\nfunction flatRecord(record, indent, childrenColumnName, expandedKeys, getRowKey, index) {\r\n  const arr = [];\r\n  arr.push({\r\n    record,\r\n    indent,\r\n    index\r\n  });\r\n  const key = getRowKey(record);\r\n  const expanded = expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.has(key);\r\n  if (record && Array.isArray(record[childrenColumnName]) && expanded) {\r\n    // expanded state, flat record\r\n    for (let i = 0; i < record[childrenColumnName].length; i += 1) {\r\n      const tempArr = flatRecord(record[childrenColumnName][i], indent + 1, childrenColumnName, expandedKeys, getRowKey, i);\r\n      arr.push(...tempArr);\r\n    }\r\n  }\r\n  return arr;\r\n}\r\n/**\r\n * flat tree data on expanded state\r\n *\r\n * @export\r\n * @template T\r\n * @param {*} data : table data\r\n * @param {string} childrenColumnName : 指定树形结构的列名\r\n * @param {Set<Key>} expandedKeys : 展开的行对应的keys\r\n * @param {GetRowKey<T>} getRowKey  : 获取当前rowKey的方法\r\n * @returns flattened data\r\n */\r\nexport default function useFlattenRecords(dataRef, childrenColumnNameRef, expandedKeysRef, getRowKey) {\r\n  const arr = computed(() => {\r\n    const childrenColumnName = childrenColumnNameRef.value;\r\n    const expandedKeys = expandedKeysRef.value;\r\n    const data = dataRef.value;\r\n    if (expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.size) {\r\n      const temp = [];\r\n      // collect flattened record\r\n      for (let i = 0; i < (data === null || data === void 0 ? void 0 : data.length); i += 1) {\r\n        const record = data[i];\r\n        temp.push(...flatRecord(record, 0, childrenColumnName, expandedKeys, getRowKey.value, i));\r\n      }\r\n      return temp;\r\n    }\r\n    return data === null || data === void 0 ? void 0 : data.map((item, index) => {\r\n      return {\r\n        record: item,\r\n        indent: 0,\r\n        index\r\n      };\r\n    });\r\n  });\r\n  return arr;\r\n}"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,KAAK;AAC9B;AACA,SAASC,UAAUA,CAACC,MAAM,EAAEC,MAAM,EAAEC,kBAAkB,EAAEC,YAAY,EAAEC,SAAS,EAAEC,KAAK,EAAE;EACtF,MAAMC,GAAG,GAAG,EAAE;EACdA,GAAG,CAACC,IAAI,CAAC;IACPP,MAAM;IACNC,MAAM;IACNI;EACF,CAAC,CAAC;EACF,MAAMG,GAAG,GAAGJ,SAAS,CAACJ,MAAM,CAAC;EAC7B,MAAMS,QAAQ,GAAGN,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACO,GAAG,CAACF,GAAG,CAAC;EAClG,IAAIR,MAAM,IAAIW,KAAK,CAACC,OAAO,CAACZ,MAAM,CAACE,kBAAkB,CAAC,CAAC,IAAIO,QAAQ,EAAE;IACnE;IACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,MAAM,CAACE,kBAAkB,CAAC,CAACY,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MAC7D,MAAME,OAAO,GAAGhB,UAAU,CAACC,MAAM,CAACE,kBAAkB,CAAC,CAACW,CAAC,CAAC,EAAEZ,MAAM,GAAG,CAAC,EAAEC,kBAAkB,EAAEC,YAAY,EAAEC,SAAS,EAAES,CAAC,CAAC;MACrHP,GAAG,CAACC,IAAI,CAAC,GAAGQ,OAAO,CAAC;IACtB;EACF;EACA,OAAOT,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASU,iBAAiBA,CAACC,OAAO,EAAEC,qBAAqB,EAAEC,eAAe,EAAEf,SAAS,EAAE;EACpG,MAAME,GAAG,GAAGR,QAAQ,CAAC,MAAM;IACzB,MAAMI,kBAAkB,GAAGgB,qBAAqB,CAACE,KAAK;IACtD,MAAMjB,YAAY,GAAGgB,eAAe,CAACC,KAAK;IAC1C,MAAMC,IAAI,GAAGJ,OAAO,CAACG,KAAK;IAC1B,IAAIjB,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACmB,IAAI,EAAE;MACjF,MAAMC,IAAI,GAAG,EAAE;MACf;MACA,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIQ,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACP,MAAM,CAAC,EAAED,CAAC,IAAI,CAAC,EAAE;QACrF,MAAMb,MAAM,GAAGqB,IAAI,CAACR,CAAC,CAAC;QACtBU,IAAI,CAAChB,IAAI,CAAC,GAAGR,UAAU,CAACC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAEC,YAAY,EAAEC,SAAS,CAACgB,KAAK,EAAEP,CAAC,CAAC,CAAC;MAC3F;MACA,OAAOU,IAAI;IACb;IACA,OAAOF,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACG,GAAG,CAAC,CAACC,IAAI,EAAEpB,KAAK,KAAK;MAC3E,OAAO;QACLL,MAAM,EAAEyB,IAAI;QACZxB,MAAM,EAAE,CAAC;QACTI;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAOC,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}