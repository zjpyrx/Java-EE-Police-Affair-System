{"ast":null,"code":"export default {\n  name: 'pageRoom',\n  data() {\n    return {\n      url: 'ws://82.156.161.216:7078/Room/',\n      ws: null,\n      user: '',\n      message: '',\n      content: ''\n    };\n  },\n  created() {},\n  methods: {\n    async joinRoom() {\n      if (this.ws) {\n        alert(\"你已经再聊天室\");\n        return;\n      }\n      let url = this.url;\n      let username = this.user;\n      this.ws = new WebSocket('ws://82.156.161.216:7078/Room/' + username); // 后端的启动端口\n      this.ws.onopen = this.webscoketonopen;\n      this.ws.onmessage = this.webscoketonmessage;\n      //发生错误触发\n      this.ws.onerror = function (event) {\n        console.log(\"连接错误\" + event);\n      };\n      //正常关闭触发\n      this.ws.onclose = function () {\n        console.log(\"连接关闭\");\n      };\n    },\n    webscoketonopen() {\n      console.log(\"与服务器成功建立连接\");\n    },\n    webscoketonmessage(value) {\n      console.log(value);\n      this.content += value.data + '\\r\\n';\n    },\n    exitRoom() {\n      this.closeWebSocket();\n    },\n    sendMsg() {\n      if (!this.ws) {\n        alert('你已经掉线，请重新加入');\n        return;\n      }\n      if (this.ws.readyState === 1) {\n        this.ws.send(this.message);\n        this.message = '';\n      } else {\n        alert('发送失败');\n      }\n    },\n    closeWebSocket() {\n      if (this.ws) {\n        this.ws.close();\n        this.ws = null;\n      }\n    },\n    talking(content) {\n      console.log(content);\n    }\n  }\n};","map":{"version":3,"names":["name","data","url","ws","user","message","content","created","methods","joinRoom","alert","username","WebSocket","onopen","webscoketonopen","onmessage","webscoketonmessage","onerror","event","console","log","onclose","value","exitRoom","closeWebSocket","sendMsg","readyState","send","close","talking"],"sources":["D:\\JavaProject\\Java-EE-Police-Affair-System\\front\\dbproject\\src\\components\\SecretChat.vue"],"sourcesContent":["<template>\r\n    <div class=\"roomStyle\">\r\n    <br>欢迎使用<strong>VueTest</strong>极简聊天室：<br/><br/>\r\n    <textarea id=\"content\" v-model=\"content\" cols=\"60\" rows=\"30\" readonly=\"readonly\"></textarea><br>\r\n    <input type=\"text\" v-model=\"message\">\r\n    <button type=\"button\" @click=\"sendMsg()\">发送消息</button>\r\n    <br/><br/>\r\n    用户：<input type=\"text\" v-model=\"user\">\r\n    <button @click=\"joinRoom()\">加入群聊</button>\r\n    <button @click=\"exitRoom()\">退出群聊</button>\r\n</div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: 'pageRoom',\r\n  data() {\r\n    return {\r\n      url: 'ws://82.156.161.216:7078/Room/',\r\n      ws: null,\r\n      user: '',\r\n      message: '',\r\n      content: '',\r\n    }\r\n  },\r\n  created(){\r\n  },\r\n  methods: {\r\n    async joinRoom(){\r\n      if(this.ws) {\r\n        alert(\"你已经再聊天室\");\r\n        return;\r\n      }\r\n      let url = this.url;\r\n      let username = this.user;\r\n      this.ws = new WebSocket('ws://82.156.161.216:7078/Room/' + username);  // 后端的启动端口\r\n      this.ws.onopen = this.webscoketonopen;\r\n      this.ws.onmessage =  this.webscoketonmessage;\r\n      //发生错误触发\r\n      this.ws.onerror = function (event) {\r\n        console.log(\"连接错误\"+event)\r\n      };\r\n      //正常关闭触发\r\n      this.ws.onclose = function () {\r\n        console.log(\"连接关闭\");\r\n      };\r\n    }, \r\n    webscoketonopen(){\r\n      console.log(\"与服务器成功建立连接\");\r\n    },\r\n    webscoketonmessage(value){\r\n      console.log(value);\r\n      this.content += (value.data + '\\r\\n') ;\r\n    },\r\n    exitRoom(){\r\n      this.closeWebSocket();\r\n    },\r\n    sendMsg(){\r\n      if(!this.ws) {\r\n        alert('你已经掉线，请重新加入');\r\n        return;\r\n      }\r\n      if(this.ws.readyState === 1){\r\n        this.ws.send(this.message);\r\n        this.message = '';\r\n      } else {\r\n        alert('发送失败');\r\n      }\r\n    },\r\n    closeWebSocket(){\r\n      if(this.ws) {\r\n        this.ws.close();\r\n        this.ws = null;\r\n      }\r\n    },\r\n    talking(content) {\r\n      console.log(content);\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style>\r\n.roomStyle{\r\n  text-align: center;\r\n  background-color: rgba(15, 161, 230, 0.35);\r\n  margin: 0 auto;\r\n  border: 1px solid #000;\r\n  width: 600px;\r\n  height: 650px\r\n}\r\n</style>"],"mappings":"AAaA,eAAe;EACbA,IAAI,EAAE,UAAU;EAChBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,GAAG,EAAE,gCAAgC;MACrCC,EAAE,EAAE,IAAI;MACRC,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE,EAAE;MACXC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,OAAOA,CAAA,EAAE,CACT,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,QAAQA,CAAA,EAAE;MACd,IAAG,IAAI,CAACN,EAAE,EAAE;QACVO,KAAK,CAAC,SAAS,CAAC;QAChB;MACF;MACA,IAAIR,GAAE,GAAI,IAAI,CAACA,GAAG;MAClB,IAAIS,QAAO,GAAI,IAAI,CAACP,IAAI;MACxB,IAAI,CAACD,EAAC,GAAI,IAAIS,SAAS,CAAC,gCAA+B,GAAID,QAAQ,CAAC,EAAG;MACvE,IAAI,CAACR,EAAE,CAACU,MAAK,GAAI,IAAI,CAACC,eAAe;MACrC,IAAI,CAACX,EAAE,CAACY,SAAQ,GAAK,IAAI,CAACC,kBAAkB;MAC5C;MACA,IAAI,CAACb,EAAE,CAACc,OAAM,GAAI,UAAUC,KAAK,EAAE;QACjCC,OAAO,CAACC,GAAG,CAAC,MAAM,GAACF,KAAK;MAC1B,CAAC;MACD;MACA,IAAI,CAACf,EAAE,CAACkB,OAAM,GAAI,YAAY;QAC5BF,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACrB,CAAC;IACH,CAAC;IACDN,eAAeA,CAAA,EAAE;MACfK,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IAC3B,CAAC;IACDJ,kBAAkBA,CAACM,KAAK,EAAC;MACvBH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;MAClB,IAAI,CAAChB,OAAM,IAAMgB,KAAK,CAACrB,IAAG,GAAI,MAAM;IACtC,CAAC;IACDsB,QAAQA,CAAA,EAAE;MACR,IAAI,CAACC,cAAc,CAAC,CAAC;IACvB,CAAC;IACDC,OAAOA,CAAA,EAAE;MACP,IAAG,CAAC,IAAI,CAACtB,EAAE,EAAE;QACXO,KAAK,CAAC,aAAa,CAAC;QACpB;MACF;MACA,IAAG,IAAI,CAACP,EAAE,CAACuB,UAAS,KAAM,CAAC,EAAC;QAC1B,IAAI,CAACvB,EAAE,CAACwB,IAAI,CAAC,IAAI,CAACtB,OAAO,CAAC;QAC1B,IAAI,CAACA,OAAM,GAAI,EAAE;MACnB,OAAO;QACLK,KAAK,CAAC,MAAM,CAAC;MACf;IACF,CAAC;IACDc,cAAcA,CAAA,EAAE;MACd,IAAG,IAAI,CAACrB,EAAE,EAAE;QACV,IAAI,CAACA,EAAE,CAACyB,KAAK,CAAC,CAAC;QACf,IAAI,CAACzB,EAAC,GAAI,IAAI;MAChB;IACF,CAAC;IACD0B,OAAOA,CAACvB,OAAO,EAAE;MACfa,OAAO,CAACC,GAAG,CAACd,OAAO,CAAC;IACtB;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}