{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"display\": \"flex\",\n    \"flex-direction\": \"column\"\n  }\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"span\", null, \"登录用户：\", -1 /* HOISTED */);\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = {\n  id: \"messageTo\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_7 = {\n  key: 1,\n  id: \"message\"\n};\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createElementBlock(\"section\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"span\", null, \"用户：\" + _toDisplayString($data.nickName), 1 /* TEXT */), _createElementVNode(\"span\", null, \"在线人数：\" + _toDisplayString($data.resData.count), 1 /* TEXT */), _hoisted_2, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.onlineUsers, (item, index) => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      key: index,\n      onClick: $event => $options.PrivateSendMessage(item),\n      style: {\n        \"margin-left\": \"40px\"\n      }\n    }, _toDisplayString(item), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", null, [_createCommentVNode(\"      <el-input v-model=\\\"nickName\\\" placeholder=\\\"请输入用户名\\\"  ></el-input>\"), _createCommentVNode(\"      <el-button @click=\\\"initWebSocket\\\">连接</el-button>\"), _createVNode(_component_el_input, {\n    modelValue: $data.contentText,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.contentText = $event),\n    placeholder: \"发送的消息\"\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_el_button, {\n    onClick: $options.sendText\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"发送\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.allList, (item, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [item.messageType === 4 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createTextVNode(_toDisplayString(item.person) + \"私聊：\" + _toDisplayString(item.toPerson) + \" \", 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_5, [_hoisted_6, _createTextVNode(\" \" + _toDisplayString(item.message), 1 /* TEXT */)])])) : (_openBlock(), _createElementBlock(\"span\", _hoisted_7, [_createTextVNode(_toDisplayString(item.person) + \"群聊：\", 1 /* TEXT */), _hoisted_8, _createTextVNode(\" \" + _toDisplayString(item.message), 1 /* TEXT */)]))]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["style","_createElementVNode","id","_createElementBlock","_hoisted_1","_toDisplayString","$data","nickName","resData","count","_hoisted_2","_Fragment","_renderList","onlineUsers","item","index","key","onClick","$event","$options","PrivateSendMessage","_hoisted_3","_createCommentVNode","_createVNode","_component_el_input","contentText","placeholder","_component_el_button","sendText","allList","messageType","_hoisted_4","person","toPerson","_hoisted_5","_hoisted_6","message","_hoisted_7","_hoisted_8"],"sources":["D:\\JavaProject\\Java-EE-Police-Affair-System\\front\\dbproject\\src\\components\\SecretChat.vue"],"sourcesContent":["<template>\r\n  <section >\r\n    <div style=\"display: flex; flex-direction: column\">\r\n      <span >用户：{{nickName}}</span>\r\n      <span>在线人数：{{resData.count}}</span>\r\n      <span>登录用户：</span>\r\n      <span  v-for=\"(item, index) in onlineUsers\" v-bind:key=\"index\" @click=\"PrivateSendMessage(item)\" style=\"margin-left: 40px\">{{item}}</span>\r\n    </div>\r\n    <div>\r\n<!--      <el-input v-model=\"nickName\" placeholder=\"请输入用户名\"  ></el-input>-->\r\n<!--      <el-button @click=\"initWebSocket\">连接</el-button>-->\r\n      <el-input v-model=\"contentText\" placeholder=\"发送的消息\"  ></el-input>\r\n      <el-button @click=\"sendText\">发送</el-button>\r\n      <div  v-for=\"(item, index) in allList\" v-bind:key=\"index\">\r\n          <div  v-if=\"item.messageType === 4\">\r\n            {{item.person}}私聊：{{item.toPerson}}\r\n            <span id=\"messageTo\"  >\r\n               <br/> {{item.message}}</span>\r\n          </div>\r\n        <span id=\"message\" v-else>\r\n            {{item.person}}群聊：<br/> {{item.message}}\r\n          </span>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'websocketServer',\r\n  data () {\r\n    return {\r\n      ws: null,\r\n      count: 0,\r\n      nickName: '', // 当前用户昵称\r\n      toUser: '',\r\n      onlineUsers: [],\r\n      list: [], // 聊天记录的数组\r\n      contentText: '', // input输入的值\r\n      resData: [], // 服务器返回结果\r\n      allList: [] // 消息数组\r\n    }\r\n  },\r\n  mounted () {\r\n    this.nickName = this.$route.query.nickName\r\n    this.initWebSocket()\r\n  },\r\n  destroyed () {\r\n    // 离开页面时关闭websocket连接\r\n    this.ws.onclose(undefined)\r\n  },\r\n  methods: {\r\n    PrivateSendMessage: function (item) {\r\n      var _this = this\r\n      _this.toUser = item\r\n      console.log('对' + item + '发起私聊')\r\n    },\r\n    // 发送聊天信息\r\n    sendText () {\r\n      let _this = this\r\n      if (!_this.contentText) {\r\n        return\r\n      }\r\n      let params = {\r\n        msg: _this.contentText\r\n      }\r\n      console.log('频道号' + _this.toUser)\r\n      console.log('频道号' + _this.toUse === null)\r\n      if (_this.toUser === '') {\r\n        params.messageType = 3\r\n      } else {\r\n        params.messageType = 4\r\n        params.toUser = _this.toUser\r\n      }\r\n      _this.ws.send(JSON.stringify(params)) // 调用WebSocket send()发送信息的方法\r\n      _this.contentText = ''\r\n    },\r\n    // 进入页面创建websocket连接\r\n    initWebSocket () {\r\n      let _this = this\r\n      // 模拟用户的号码npm\r\n      // 判断页面有没有存在websocket连接\r\n      if (window.WebSocket) {\r\n        let serverHot = window.location.hostname\r\n        let sip = '1010'\r\n        console.log('can')\r\n        if (_this.nickName === '' || _this.nickName === undefined) {\r\n          console.log('_this.nickName爲空')\r\n          return\r\n        }\r\n        // 填写本地IP地址 此处的 :9101端口号 要与后端配置的一致！\r\n        let url = 'ws://' + serverHot + ':8093' + '/groupChat/' + sip + '/' + this.nickName // `ws://127.0.0.1/9101/groupChat/10086/聊天室`\r\n        let ws = new WebSocket(url)\r\n        _this.ws = ws\r\n        ws.onopen = function (e) {\r\n          console.log('服务器连接成功: ' + url)\r\n        }\r\n        ws.onclose = function (e) {\r\n          console.log('服务器连接关闭: ' + url)\r\n        }\r\n        ws.onerror = function () {\r\n          console.log('服务器连接出错: ' + url)\r\n        }\r\n        ws.onmessage = function (e) {\r\n          // 接收服务器返回的数据\r\n          let resData = JSON.parse(e.data)\r\n          _this.resData = resData\r\n          _this.count = resData.count\r\n          _this.onlineUsers = resData.onlineList\r\n          _this.list = [\r\n            _this.list,\r\n            { nickName: resData.nickName, content: resData.msg, onlineUsers: resData.onlineList }\r\n          ]\r\n          // 1 代表上线 2 代表下线 3代表群发 4代表私发消息\r\n          if (resData.messageType === 2) {\r\n            // document.getElementById('message').innerHTML += resData.nickName + ':' + '<br/>' + resData.msg + '<br/>'\r\n            let item = {\r\n              person: resData.nickName,\r\n              message: resData.msg\r\n            }\r\n            _this.allList.push(item)\r\n          }\r\n          if (resData.messageType === 4) {\r\n            // document.getElementById('messageTo').innerHTML += resData.fromUser + ':' + '(私聊)' + resData.toUser + '<br/>' + resData.msg + '<br/>'\r\n            let item = {\r\n              person: resData.fromUser,\r\n              message: resData.msg,\r\n              toPerson: resData.toUser,\r\n              messageType: resData.messageType\r\n            }\r\n            _this.allList.push(item)\r\n            console.log('添加', _this.allList)\r\n          } else {\r\n            let item = {\r\n              person: resData.fromUser,\r\n              message: resData.msg,\r\n              messageType: resData.messageType\r\n            }\r\n            _this.allList.push(item)\r\n            console.log('添加', _this.allList)\r\n          }\r\n          /* if (resData.messageType === 1 || resData.messageType === 3) {\r\n            document.getElementById('message').innerHTML += resData.fromUser + ':' + '(群发)' + '<br/>' + resData.msg + '<br/>'\r\n            let item ={\r\n              person: resData.nickName,\r\n              message: resData.msg\r\n            }\r\n            allList.push(item)\r\n          } */\r\n          console.log('服务器返回的数据', resData)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n\r\n"],"mappings":";;EAESA,KAA6C,EAA7C;IAAA;IAAA;EAAA;AAA6C;gCAGhDC,mBAAA,CAAkB,cAAZ,OAAK;;;;;;EAWCC,EAAE,EAAC;AAAW;gCACjBD,mBAAA,CAAK;;;EAENC,EAAE,EAAC;;gCACaD,mBAAA,CAAK;;;;;uBAnBjCE,mBAAA,CAuBU,kBAtBRF,mBAAA,CAKM,OALNG,UAKM,GAJJH,mBAAA,CAA6B,cAAtB,KAAG,GAAAI,gBAAA,CAAEC,KAAA,CAAAC,QAAQ,kBACpBN,mBAAA,CAAmC,cAA7B,OAAK,GAAAI,gBAAA,CAAEC,KAAA,CAAAE,OAAO,CAACC,KAAK,kBAC1BC,UAAkB,G,kBAClBP,mBAAA,CAA0IQ,SAAA,QAAAC,WAAA,CAA3GN,KAAA,CAAAO,WAAW,GAA3BC,IAAI,EAAEC,KAAK;yBAA1BZ,mBAAA,CAA0I;MAAvFa,GAAG,EAAED,KAAK;MAAGE,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,kBAAkB,CAACN,IAAI;MAAGd,KAAyB,EAAzB;QAAA;MAAA;wBAA4Bc,IAAI,wBAAAO,UAAA;oCAEnIpB,mBAAA,CAeM,cAdVqB,mBAAA,6EAA4E,EAC5EA,mBAAA,4DAA6D,EACvDC,YAAA,CAAiEC,mBAAA;gBAA9ClB,KAAA,CAAAmB,WAAW;+DAAXnB,KAAA,CAAAmB,WAAW,GAAAP,MAAA;IAAEQ,WAAW,EAAC;2CAC5CH,YAAA,CAA2CI,oBAAA;IAA/BV,OAAK,EAAEE,QAAA,CAAAS;EAAQ;sBAAE,MAAE,C,iBAAF,IAAE,E;;qDAC/BzB,mBAAA,CASMQ,SAAA,QAAAC,WAAA,CATwBN,KAAA,CAAAuB,OAAO,GAAvBf,IAAI,EAAEC,KAAK;yBAAzBZ,mBAAA,CASM;MATwCa,GAAG,EAAED;IAAK,IACxCD,IAAI,CAACgB,WAAW,U,cAA5B3B,mBAAA,CAIM,OAAA4B,UAAA,G,kCAHFjB,IAAI,CAACkB,MAAM,IAAE,KAAG,GAAA3B,gBAAA,CAAES,IAAI,CAACmB,QAAQ,IAAE,GACnC,iBAAAhC,mBAAA,CACgC,QADhCiC,UACgC,GAA7BC,UAAK,E,iBAAA,GAAC,GAAA9B,gBAAA,CAAES,IAAI,CAACsB,OAAO,iB,sBAE3BjC,mBAAA,CAES,QAFTkC,UAES,G,kCADHvB,IAAI,CAACkB,MAAM,IAAE,KAAG,iBAAAM,UAAK,E,iBAAA,GAAC,GAAAjC,gBAAA,CAAES,IAAI,CAACsB,OAAO,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}