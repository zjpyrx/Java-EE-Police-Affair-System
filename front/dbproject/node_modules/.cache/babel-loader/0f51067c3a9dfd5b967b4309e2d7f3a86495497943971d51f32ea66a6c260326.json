{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'websocketServer',\n  data() {\n    return {\n      ws: null,\n      count: 0,\n      nickName: 'abc',\n      // 当前用户昵称\n      toUser: '',\n      onlineUsers: [],\n      list: [],\n      // 聊天记录的数组\n      contentText: '',\n      // input输入的值\n      resData: [],\n      // 服务器返回结果\n      allList: [] // 消息数组\n    };\n  },\n\n  mounted() {\n    this.nickName = this.$route.query.nickName;\n    this.initWebSocket();\n  },\n  destroyed() {\n    // 离开页面时关闭websocket连接\n    this.ws.onclose(undefined);\n  },\n  methods: {\n    PrivateSendMessage: function (item) {\n      var _this = this;\n      _this.toUser = item;\n      console.log('对' + item + '发起私聊');\n    },\n    // 发送聊天信息\n    sendText() {\n      let _this = this;\n      if (!_this.contentText) {\n        return;\n      }\n      let params = {\n        msg: _this.contentText\n      };\n      console.log('频道号' + _this.toUser);\n      console.log('频道号' + _this.toUse === null);\n      if (_this.toUser === '') {\n        params.messageType = 3;\n      } else {\n        params.messageType = 4;\n        params.toUser = _this.toUser;\n      }\n      _this.ws.send(JSON.stringify(params)); // 调用WebSocket send()发送信息的方法\n      _this.contentText = '';\n    },\n    // 进入页面创建websocket连接\n    initWebSocket() {\n      let _this = this;\n      // 模拟用户的号码npm\n      // 判断页面有没有存在websocket连接\n      if (window.WebSocket) {\n        let serverHot = window.location.hostname;\n        let sip = '1010';\n        console.log('can');\n        if (_this.nickName === '' || _this.nickName === undefined) {\n          console.log('_this.nickName爲空');\n          return;\n        }\n        // 填写本地IP地址 此处的 :9101端口号 要与后端配置的一致！\n        let url = 'ws://' + serverHot + ':8093' + '/groupChat/' + sip + '/' + this.nickName; // `ws://127.0.0.1/9101/groupChat/10086/聊天室`\n        let ws = new WebSocket(url);\n        _this.ws = ws;\n        ws.onopen = function (e) {\n          console.log('服务器连接成功: ' + url);\n        };\n        ws.onclose = function (e) {\n          console.log('服务器连接关闭: ' + url);\n        };\n        ws.onerror = function () {\n          console.log('服务器连接出错: ' + url);\n        };\n        ws.onmessage = function (e) {\n          // 接收服务器返回的数据\n          let resData = JSON.parse(e.data);\n          _this.resData = resData;\n          _this.count = resData.count;\n          _this.onlineUsers = resData.onlineList;\n          _this.list = [_this.list, {\n            nickName: resData.nickName,\n            content: resData.msg,\n            onlineUsers: resData.onlineList\n          }];\n          // 1 代表上线 2 代表下线 3代表群发 4代表私发消息\n          if (resData.messageType === 2) {\n            // document.getElementById('message').innerHTML += resData.nickName + ':' + '<br/>' + resData.msg + '<br/>'\n            let item = {\n              person: resData.nickName,\n              message: resData.msg\n            };\n            _this.allList.push(item);\n          }\n          if (resData.messageType === 4) {\n            // document.getElementById('messageTo').innerHTML += resData.fromUser + ':' + '(私聊)' + resData.toUser + '<br/>' + resData.msg + '<br/>'\n            let item = {\n              person: resData.fromUser,\n              message: resData.msg,\n              toPerson: resData.toUser,\n              messageType: resData.messageType\n            };\n            _this.allList.push(item);\n            console.log('添加', _this.allList);\n          } else {\n            let item = {\n              person: resData.fromUser,\n              message: resData.msg,\n              messageType: resData.messageType\n            };\n            _this.allList.push(item);\n            console.log('添加', _this.allList);\n          }\n          /* if (resData.messageType === 1 || resData.messageType === 3) {\r\n            document.getElementById('message').innerHTML += resData.fromUser + ':' + '(群发)' + '<br/>' + resData.msg + '<br/>'\r\n            let item ={\r\n              person: resData.nickName,\r\n              message: resData.msg\r\n            }\r\n            allList.push(item)\r\n          } */\n          console.log('服务器返回的数据', resData);\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","ws","count","nickName","toUser","onlineUsers","list","contentText","resData","allList","mounted","$route","query","initWebSocket","destroyed","onclose","undefined","methods","PrivateSendMessage","item","_this","console","log","sendText","params","msg","toUse","messageType","send","JSON","stringify","window","WebSocket","serverHot","location","hostname","sip","url","onopen","e","onerror","onmessage","parse","onlineList","content","person","message","push","fromUser","toPerson"],"sources":["D:\\JavaProject\\Java-EE-Police-Affair-System\\front\\dbproject\\src\\components\\SecretChat.vue"],"sourcesContent":["<template>\r\n  <section >\r\n    <div style=\"display: flex; flex-direction: column\">\r\n      <span >用户：{{nickName}}</span>\r\n      <span>在线人数：{{resData.count}}</span>\r\n      <span>登录用户：</span>\r\n      <span  v-for=\"(item, index) in onlineUsers\" v-bind:key=\"index\" @click=\"PrivateSendMessage(item)\" style=\"margin-left: 40px\">{{item}}</span>\r\n    </div>\r\n    <div>\r\n<!--      <el-input v-model=\"nickName\" placeholder=\"请输入用户名\"  ></el-input>-->\r\n<!--      <el-button @click=\"initWebSocket\">连接</el-button>-->\r\n      <el-input v-model=\"contentText\" placeholder=\"发送的消息\"  ></el-input>\r\n      <el-button @click=\"sendText\">发送</el-button>\r\n      <div  v-for=\"(item, index) in allList\" v-bind:key=\"index\">\r\n          <div  v-if=\"item.messageType === 4\">\r\n            {{item.person}}私聊：{{item.toPerson}}\r\n            <span id=\"messageTo\"  >\r\n               <br/> {{item.message}}</span>\r\n          </div>\r\n        <span id=\"message\" v-else>\r\n            {{item.person}}群聊：<br/> {{item.message}}\r\n          </span>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'websocketServer',\r\n  data () {\r\n    return {\r\n      ws: null,\r\n      count: 0,\r\n      nickName: 'abc', // 当前用户昵称\r\n      toUser: '',\r\n      onlineUsers: [],\r\n      list: [], // 聊天记录的数组\r\n      contentText: '', // input输入的值\r\n      resData: [], // 服务器返回结果\r\n      allList: [] // 消息数组\r\n    }\r\n  },\r\n  mounted () {\r\n    this.nickName = this.$route.query.nickName\r\n    this.initWebSocket()\r\n  },\r\n  destroyed () {\r\n    // 离开页面时关闭websocket连接\r\n    this.ws.onclose(undefined)\r\n  },\r\n  methods: {\r\n    PrivateSendMessage: function (item) {\r\n      var _this = this\r\n      _this.toUser = item\r\n      console.log('对' + item + '发起私聊')\r\n    },\r\n    // 发送聊天信息\r\n    sendText () {\r\n      let _this = this\r\n      if (!_this.contentText) {\r\n        return\r\n      }\r\n      let params = {\r\n        msg: _this.contentText\r\n      }\r\n      console.log('频道号' + _this.toUser)\r\n      console.log('频道号' + _this.toUse === null)\r\n      if (_this.toUser === '') {\r\n        params.messageType = 3\r\n      } else {\r\n        params.messageType = 4\r\n        params.toUser = _this.toUser\r\n      }\r\n      _this.ws.send(JSON.stringify(params)) // 调用WebSocket send()发送信息的方法\r\n      _this.contentText = ''\r\n    },\r\n    // 进入页面创建websocket连接\r\n    initWebSocket () {\r\n      let _this = this\r\n      // 模拟用户的号码npm\r\n      // 判断页面有没有存在websocket连接\r\n      if (window.WebSocket) {\r\n        let serverHot = window.location.hostname\r\n        let sip = '1010'\r\n        console.log('can')\r\n        if (_this.nickName === '' || _this.nickName === undefined) {\r\n          console.log('_this.nickName爲空')\r\n          return\r\n        }\r\n        // 填写本地IP地址 此处的 :9101端口号 要与后端配置的一致！\r\n        let url = 'ws://' + serverHot + ':8093' + '/groupChat/' + sip + '/' + this.nickName // `ws://127.0.0.1/9101/groupChat/10086/聊天室`\r\n        let ws = new WebSocket(url)\r\n        _this.ws = ws\r\n        ws.onopen = function (e) {\r\n          console.log('服务器连接成功: ' + url)\r\n        }\r\n        ws.onclose = function (e) {\r\n          console.log('服务器连接关闭: ' + url)\r\n        }\r\n        ws.onerror = function () {\r\n          console.log('服务器连接出错: ' + url)\r\n        }\r\n        ws.onmessage = function (e) {\r\n          // 接收服务器返回的数据\r\n          let resData = JSON.parse(e.data)\r\n          _this.resData = resData\r\n          _this.count = resData.count\r\n          _this.onlineUsers = resData.onlineList\r\n          _this.list = [\r\n            _this.list,\r\n            { nickName: resData.nickName, content: resData.msg, onlineUsers: resData.onlineList }\r\n          ]\r\n          // 1 代表上线 2 代表下线 3代表群发 4代表私发消息\r\n          if (resData.messageType === 2) {\r\n            // document.getElementById('message').innerHTML += resData.nickName + ':' + '<br/>' + resData.msg + '<br/>'\r\n            let item = {\r\n              person: resData.nickName,\r\n              message: resData.msg\r\n            }\r\n            _this.allList.push(item)\r\n          }\r\n          if (resData.messageType === 4) {\r\n            // document.getElementById('messageTo').innerHTML += resData.fromUser + ':' + '(私聊)' + resData.toUser + '<br/>' + resData.msg + '<br/>'\r\n            let item = {\r\n              person: resData.fromUser,\r\n              message: resData.msg,\r\n              toPerson: resData.toUser,\r\n              messageType: resData.messageType\r\n            }\r\n            _this.allList.push(item)\r\n            console.log('添加', _this.allList)\r\n          } else {\r\n            let item = {\r\n              person: resData.fromUser,\r\n              message: resData.msg,\r\n              messageType: resData.messageType\r\n            }\r\n            _this.allList.push(item)\r\n            console.log('添加', _this.allList)\r\n          }\r\n          /* if (resData.messageType === 1 || resData.messageType === 3) {\r\n            document.getElementById('message').innerHTML += resData.fromUser + ':' + '(群发)' + '<br/>' + resData.msg + '<br/>'\r\n            let item ={\r\n              person: resData.nickName,\r\n              message: resData.msg\r\n            }\r\n            allList.push(item)\r\n          } */\r\n          console.log('服务器返回的数据', resData)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}